package sec.filesystem;

import java.io.OutputStream;
import java.io.PrintStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.xml.bind.DatatypeConverter.printHexBinary;
import types.Buffer_t;
import utils.CryptoUtils;

/*  Demo Class used for demonstrating a client connecting to the File Server, 
    and issuing a write and read command on his file.

    Please refer to the output generated by the server at runtime as it
    receives and processes the Demo Apps requests, for information on the 
    exceptions caught by the file system, and the returns of the operations 
    being performed by the server.
 */
public class DemoReadWriteOwnFile {

    static PrintStream originalStream = System.out;
    static PrintStream dummyStream = new PrintStream(new OutputStream() {
        public void write(int b) {
            //NO-OP
        }
    });

    private static void supressOutStream(String[] in) {
        if (in.length > 0) {
            if (in[0].equalsIgnoreCase("-less")) {
                System.setOut(dummyStream);
            }
        }

    }
    private static void enableOutStream(String[] in) {  
        if (in.length > 0) {
            if (in[0].equalsIgnoreCase("-less")) {
                System.setOut(originalStream);
            }
        }
    }

    public static void main(String[] args) {
        try {
            Library c = new Library();
            Buffer_t buffer = new Buffer_t(CryptoUtils.serialize(""));

            // Initializing the file system
            System.out.println("//\t[1] Initializing the File System ...");
            supressOutStream(args);
            c.setClientID(c.fs_init());
            enableOutStream(args);
            System.out.println("//\t[2] File System has been initialized sucessfully.");
            System.out.println("//\t[2] Client ID assigned by the server:\n\t" + c.getClientID().getValue());
            System.out.println("---------------------------------------------------------\n");

            // Writing to the file at position 0
            supressOutStream(args);
            String s = "The quick brown fox jumps over the lazy dog";
            buffer.setValue(CryptoUtils.serialize(s));
            enableOutStream(args);
            System.out.println("//\t[3] Performing a write request ...");
            System.out.println("//\t[3] Writing some data of size " + buffer.getValue().length + " to the file, at pos 0 ...");
            supressOutStream(args);
            c.fs_write(0, buffer.getValue().length, buffer);
            String sent = printHexBinary(buffer.getValue());
            enableOutStream(args);
            System.out.println("//\t[4] Write request has been performed successfully.");
            System.out.println("//\t[4] Data sent to the file system:\n\t" + sent);
            System.out.println("---------------------------------------------------------\n");

            // Reading all the data that was just written to the file
            System.out.println("//\t[5] Performing a read request ...");
            System.out.println("//\t[5] Reading the data that was just written to the file ...");
            supressOutStream(args);
            int bytesRead = c.fs_read(c.getPublicKey(), 0, buffer.getValue().length, buffer);
            String received = printHexBinary(buffer.getValue());
            enableOutStream(args);
            System.out.println("//\t[6] Read request has been performed successfully.");
            System.out.println("//\t[6] Number of bytes that were read\n\t" + bytesRead);
            System.out.println("//\t[6] Data read from the file:\n\t" + received);
            System.out.println("---------------------------------------------------------\n");

            // Comparing the output of read and write
            System.out.println("//\t[7] Comparing the data sent with the data received...");
            System.out.println("//\t[7] String.compareTo(sent,received) returns:\n\t" + sent.compareTo(received));
            System.out.println("---------------------------------------------------------\n");
            System.out.println("//\t[ ] DemoApp has terminated.");

        } catch (Exception ex) {
            enableOutStream(args);
            System.out.println("//\t[ ] [Catch] Exception:\n\t" + ex.getMessage());
            Logger.getLogger(DemoReadWriteOwnFile.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(-1);
        }
    }
}
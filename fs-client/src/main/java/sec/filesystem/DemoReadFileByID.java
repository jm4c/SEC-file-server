package sec.filesystem;

import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.xml.bind.DatatypeConverter.printHexBinary;
import types.Buffer_t;
import utils.CryptoUtils;

/*  Demo Class used for demonstrating a client connecting to the File Server, 
    and issuing a read command on file that does not belong to him.

    Please refer to the output generated by the server at runtime as it
    receives and processes the Demo Apps requests, for information on the 
    exceptions caught by the file system, and the returns of the operations 
    being performed by the server.
 */
public class DemoReadFileByID {

    public static void main(String[] args) {
        try {
            Library c1 = new Library();
            Library c2 = new Library();
            Buffer_t buffer = new Buffer_t(CryptoUtils.serialize(""));
            
            // Initializing the file system
            System.out.println("CLIENT 1");
            System.out.println("Initializing the File System...");
            c1.fs_init();
            System.out.println("Done!");
            System.out.println("Client ID assigned by server: " + c1.getClientID().getValue());
            System.out.println("---------------------------------------------------------\n");

            // Initializing the file system
            System.out.println("CLIENT 2");
            System.out.println("Initializing the File System...");
            c2.fs_init();
            System.out.println("Done!");
            System.out.println("Client ID assigned by server: " + c2.getClientID().getValue());
            System.out.println("---------------------------------------------------------\n");
            
            // Writing to client 1's file, at position 0.
            System.out.println("CLIENT 1");
            String s = "The quick brown fox jumps over the lazy dog";
            buffer.setValue(CryptoUtils.serialize(s));
            int size = buffer.getValue().length;
            System.out.println("Writing some data of size " + size + "to the file, at pos 0 ...");
            c1.fs_write(0, size, buffer);
            String sent = printHexBinary(buffer.getValue());
            System.out.println("Done!");
            System.out.println("Data sent to the file system:  " + sent);
            System.out.println("---------------------------------------------------------\n"); 
            
            // Reading, as client 2, all the data that was just written to client 1's file.
            System.out.println("CLIENT 2");
            System.out.println("Reading the data that was just written to the file...");
            buffer.setValue(new byte[size]);
            int bytesRead = c2.fs_read(c1.getPublicKey(), 0, size, buffer);
            String received = printHexBinary(buffer.getValue());
            System.out.println("Done!");
            System.out.println("Number of bytes that were read: " + bytesRead);
            System.out.println("Data read from the file:  " + received);
            System.out.println("---------------------------------------------------------\n");        
            
        } catch (Exception ex) {
            Logger.getLogger(DemoReadFileByID.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
